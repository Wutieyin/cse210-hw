using System;
using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;

class GoalManager
{
    private List<Goal> _goals;
    private int _score;

    public GoalManager()
    {
        _goals = new List<Goal>();
        _score = 0;
    }

    public void Start()
    {
        LoadGoals();
        DisplayPlayerInfo();
    }

    public void DisplayPlayerInfo()
    {
        Console.WriteLine($"Current Scoreee: {_score}");
        ListGoalNames();
        ListGoalDetails();
    }

    public void ListGoalNames()
    {
        Console.WriteLine("Goals:");
        foreach (var goal in _goals)
        {
            Console.WriteLine(goal.Name);
        }
    }

    public void ListGoalDetails()
    {
        Console.WriteLine("Goal Details:");
        foreach (var goal in _goals)
        {
            Console.WriteLine(goal.GetDetailsString());
        }
    }

    public void CreateGoal(string name, string description, int points, GoalType type, int target = 0)
    {
        Goal goal;
        switch (type)
        {
            case GoalType.Simple:
                goal = new SimpleGoal(name, description, points);
                break;
            case GoalType.Eternal:
                goal = new EternalGoal(name, description, points);
                break;
            case GoalType.Checklist:
                goal = new ChecklistGoal(name, description, points, target);
                break;
            default:
                throw new ArgumentException("Invalid goal type");
        }
        _goals.Add(goal);
    }

    public void RecordEvent(string goalName)
    {
        foreach (Goal goal in _goals)
        {
            if (goal.Name == goalName)
            {
                goal.RecordEvent();
                if (goal.IsCompleted())
                {
                    _score += goal.Points;
                    Console.WriteLine($"Goal {goal.Name} completed! You earned {goal.Points} points.");
                    if (goal.GetType() == typeof(ChecklistGoal))
                    {
                        ChecklistGoal checklistGoal = (ChecklistGoal)goal;
                        if (checklistGoal.IsBonusAchieved())
                        {
                            _score += checklistGoal.GetBonus();
                            Console.WriteLine($"Bonus achieved! You earned {checklistGoal.GetBonus()} bonus points.");
                        }
                    }
                }
                return;
            }
        }
        Console.WriteLine("Goal not found.");
    }

    public void SaveGoals()
    {
        string json = JsonConvert.SerializeObject(_goals);
        File.WriteAllText("goals.json", json);
    }

    public void LoadGoals()
    {
        if (File.Exists("goals.json"))
        {
            string json = File.ReadAllText("goals.json");
            _goals = JsonConvert.DeserializeObject<List<Goal>>(json);
        }
    }
}

enum GoalType
{
    Simple,
    Eternal,
    Checklist
}

class Goal
{
    public string Name { get; }
    public string Description { get; }
    public int Points { get; }

    public Goal(string name, string description, int points)
    {
        Name = name;
        Description = description;
        Points = points;
    }

    public virtual void RecordEvent()
    {
        // To be overridden by derived classes
    }

    public virtual bool IsCompleted()
    {
        return false; // To be overridden by derived classes
    }

    public virtual string GetDetailsString()
    {
        return $"{Name}: {Description} - {Points} points";
    }
}

class SimpleGoal : Goal
{
    private bool _isComplete;

    public SimpleGoal(string name, string description, int points)
        : base(name, description, points)
    {
        _isComplete = false;
    }

    public override void RecordEvent()
    {
        _isComplete = true;
    }

    public override bool IsCompleted()
    {
        return _isComplete;
    }

    public override string GetDetailsString()
    {
        return base.GetDetailsString() + $" - {_isComplete}";
    }
}

class EternalGoal : Goal
{
    public EternalGoal(string name, string description, int points)
        : base(name, description, points)
    {
    }

    public override void RecordEvent()
    {
        // No need to track completion for eternal goals
    }

    public override string GetDetailsString()
    {
        return base.GetDetailsString();
    }
}

class ChecklistGoal : Goal
{
    private int _amountCompleted;
    private int _target;
    protected int _bonus; // Changed access indicated from private to protected

    public ChecklistGoal(string name, string description, int points, int target)
        : base(name, description, points )
    {
        _amountCompleted = 0;
        _target = target;
        _bonus = points * 5; // Bonus is 5 times the regular points
    }

    public int GetBonus() // Additional method
    {
        return _bonus;
    }

    public void SetBonus(int bonus) // Additional method
    {
        _bonus = bonus;
    }

    public override void RecordEvent()
    {
        _amountCompleted++;
    }

    public override bool IsCompleted()
    {
        return _amountCompleted >= _target;
    }

    public bool IsBonusAchieved()
    {
        return _amountCompleted == _target;
    }

    public override string GetDetailsString()
    {
        return base.GetDetailsString() + $" - Completed {_amountCompleted}/{_target} times";
    }
}

class Program
{
    static void Main(string[] args)
    {
        GoalManager manager = new GoalManager();
        manager.Start();
        manager.CreateGoal("Read Scriptures", "Read scriptures daily", 100, GoalType.Eternal);
        
        manager.CreateGoal("Run a Marathon", "Complete a full marathon", 1000, GoalType.Simple);
        manager.CreateGoal("Attend Temple", "Attend the temple 10 times", 50, GoalType.Checklist, 10);
        manager.RecordEvent("Read Scriptures");
        manager.RecordEvent("Run a Marathon");
        manager.RecordEvent("Attend Temple");
        manager.RecordEvent("Attend Temple");
        manager.RecordEvent("Attend Temple");
        manager.RecordEvent("Attend Temple");
        manager.RecordEvent("Attend Temple");
        manager.RecordEvent("Attend Temple");
        manager.RecordEvent("Attend Temple");
        manager.RecordEvent("Attend Temple");
        manager.RecordEvent("Attend Temple");
        manager.RecordEvent("Attend Temple");
        manager.DisplayPlayerInfo();
        manager.SaveGoals();
    }
}
